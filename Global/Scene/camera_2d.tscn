[gd_scene load_steps=2 format=3 uid="uid://gctl0rjtf4op"]

[sub_resource type="GDScript" id="GDScript_gotsw"]
script/source = "extends Camera2D

# Camera control settings
@export var zoom_speed: float = 0.1
@export var min_zoom: float = 0.5
@export var max_zoom: float = 3.0
@export var pan_speed: float = 1.0

# Internal variables
var is_panning: bool = false
var last_mouse_position: Vector2

func _ready():
	# Set initial zoom if desired
	zoom = Vector2.ONE

func _input(event):
	handle_zoom(event)
	handle_panning(event)
	save_camera_state()

func handle_zoom(event):
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_WHEEL_UP:
			zoom_in()
		elif event.button_index == MOUSE_BUTTON_WHEEL_DOWN:
			zoom_out()

func handle_panning(event):
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_MIDDLE:
			if event.pressed:
				start_panning(event.position)
			else:
				stop_panning()
	
	elif event is InputEventMouseMotion and is_panning:
		pan_camera(event.position)

func start_panning(mouse_pos: Vector2):
	is_panning = true
	last_mouse_position = mouse_pos

func stop_panning():
	is_panning = false

func pan_camera(mouse_pos: Vector2):
	var delta = (last_mouse_position - mouse_pos) * pan_speed / zoom.x
	global_position += delta
	last_mouse_position = mouse_pos

func zoom_in():
	var new_zoom = zoom.x + zoom_speed
	set_zoom_level(new_zoom)

func zoom_out():
	var new_zoom = zoom.x - zoom_speed
	set_zoom_level(new_zoom)

func set_zoom_level(new_zoom: float):
	new_zoom = clamp(new_zoom, min_zoom, max_zoom)
	zoom = Vector2(new_zoom, new_zoom)

# Optional: Smooth zoom with tweening
func smooth_zoom_to(target_zoom: float, duration: float = 0.2):
	target_zoom = clamp(target_zoom, min_zoom, max_zoom)
	var tween = create_tween()
	tween.tween_property(self, \"zoom\", Vector2(target_zoom, target_zoom), duration)

# Optional: Reset camera to default position and zoom
func reset_camera():
	var tween = create_tween()
	tween.parallel().tween_property(self, \"global_position\", Vector2.ZERO, 0.3)
	tween.parallel().tween_property(self, \"zoom\", Vector2.ONE, 0.3)
	
# Camera state management
func save_camera_state():
	if not Global:
		push_warning(\"Global Param singleton not found. Camera state not saved.\")
		return
	
	Global.camera_position = global_position
	Global.camera_zoom = zoom.x
	
"

[node name="Camera2D" type="Camera2D"]
script = SubResource("GDScript_gotsw")
